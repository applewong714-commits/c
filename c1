import tkinter as tk
from tkinter import messagebox

def caesar_shift(text, user_offset, is_encrypt=True):
    try:
        user_offset = int(user_offset)
    except ValueError:
        raise ValueError("偏移值必須是整數")
    
    # 根據用戶定義的方向計算內部移位
    # 正數向左 (負移位), 負數向右 (正移位)
    internal_shift = -user_offset  # 無論正負，-user_offset 會處理方向
    
    if not is_encrypt:
        internal_shift = -internal_shift  # 解密時反向
    
    result = ""
    for char in text:
        code = ord(char)
        if char.isupper():
            result += chr((code - ord('A') + internal_shift) % 26 + ord('A'))
        elif char.islower():
            result += chr((code - ord('a') + internal_shift) % 26 + ord('a'))
        elif char.isdigit():
            result += chr((code - ord('0') + internal_shift) % 10 + ord('0'))
        elif 0x4E00 <= code <= 0x9FFF:
            result += chr((code - 0x4E00 + internal_shift) % 20992 + 0x4E00)
        else:
            result += char
    return result

def show_encrypt():
    decrypt_frame.pack_forget()
    encrypt_frame.pack(pady=20)
    result_label.config(text="")

def show_decrypt():
    encrypt_frame.pack_forget()
    decrypt_frame.pack(pady=20)
    result_label.config(text="")

def perform_encrypt():
    text = encrypt_text_entry.get()
    offset = encrypt_shift_entry.get()
    try:
        encrypted = caesar_shift(text, offset, is_encrypt=True)
        result_label.config(text=f"已加密的原文: {encrypted}")
    except ValueError as e:
        messagebox.showerror("錯誤", str(e))

def perform_decrypt():
    text = decrypt_text_entry.get()
    offset = decrypt_shift_entry.get()
    try:
        decrypted = caesar_shift(text, offset, is_encrypt=False)
        result_label.config(text=f"已解密的原文: {decrypted}")
    except ValueError as e:
        messagebox.showerror("錯誤", str(e))

# 主窗口
root = tk.Tk()
root.title("凱撒加密/解密程式")
root.geometry("500x400")

# 選擇按鈕
select_frame = tk.Frame(root)
select_frame.pack(pady=10)

encrypt_btn = tk.Button(select_frame, text="選擇加密", command=show_encrypt)
encrypt_btn.pack(side=tk.LEFT, padx=10)

decrypt_btn = tk.Button(select_frame, text="選擇解密", command=show_decrypt)
decrypt_btn.pack(side=tk.LEFT, padx=10)

# 加密框架
encrypt_frame = tk.Frame(root)

tk.Label(encrypt_frame, text="請輸入原文:").pack(anchor=tk.W)
encrypt_text_entry = tk.Entry(encrypt_frame, width=50)
encrypt_text_entry.pack()

tk.Label(encrypt_frame, text="自訂偏移值 (正數向左偏移, 負數向右偏移):").pack(anchor=tk.W)
encrypt_shift_entry = tk.Entry(encrypt_frame, width=50)
encrypt_shift_entry.pack()

encrypt_action_btn = tk.Button(encrypt_frame, text="進行加密", command=perform_encrypt)
encrypt_action_btn.pack(pady=10)

# 解密框架
decrypt_frame = tk.Frame(root)

tk.Label(decrypt_frame, text="請輸入已加密的原文:").pack(anchor=tk.W)
decrypt_text_entry = tk.Entry(decrypt_frame, width=50)
decrypt_text_entry.pack()

tk.Label(decrypt_frame, text="自訂偏移值 (必須與加密時相同，正數向左偏移, 負數向右偏移):").pack(anchor=tk.W)
decrypt_shift_entry = tk.Entry(decrypt_frame, width=50)
decrypt_shift_entry.pack()

decrypt_action_btn = tk.Button(decrypt_frame, text="進行解密", command=perform_decrypt)
decrypt_action_btn.pack(pady=10)

# 結果顯示 (共享)
result_label = tk.Label(root, text="", wraplength=400)
result_label.pack(pady=20)

# 初始隱藏框架
encrypt_frame.pack_forget()
decrypt_frame.pack_forget()

root.mainloop()
